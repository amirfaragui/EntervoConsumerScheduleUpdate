{"version":3,"file":"kendo.dockmanager.min.js","names":["global","factory","exports","module","require","define","amd","globalThis","self","kendodockmanager","js","this","$","undefined$1","kendo","window","Widget","ui","NS","extend","percentageUnitsRegex","DOCK_MANAGER_TOOLBAR","isPlainObject","TOOLBAR_TEMPLATE","KSTATIC_PANE","KKPINNED_PANE","KKUNPINNED_PANE","KPANE_TABBED","SPLITTER","KSPLITBAR","PANE_SIZING_PROP","HORIZONTAL","VERTICAL","KHIDDEN","KBUTTON","KBUTTON_PRIMARY","KBUTTON_BASE","MAX_NUMBER_VALUE","Number","MAX_SAFE_INTEGER","KPANE","KPANES_CONTAINER","KPANE_ACTIONS","KDOCK_INDICATOR","KDOCK_NAVIGATOR","KDOCK_PREVIEW","KSELECTED","KACTIVE","KTABSTRIP","KSPLITBAR_DRAGGABLE","SPLIT","TAB","HEIGHT","WIDTH","TOP","BOTTOM","LEFT","RIGHT","MIDDLE","CLICK","PIN","UNPIN","UNSHIFT","PANE","paneSelector","uid","attr","unpinnedResizeSplitbar","UID_ATTR","INDICATOR_ATTR","ACTION_ATTR","INDICATOR_TEMPLATE","NAVIGATOR_TEMPLATE","CLOSE","DOCK","INNER_DOCK","RESIZE","DRAG","DRAGSTART","DRAGEND","isPercentageSize","size","test","DockSplitter","init","element","options","that","fn","call","_marker","guid","substring","addClass","orientation","_initPanes","_initResizable","notify","panes","events","paneElements","children","panesCount","length","sizedPanes","i","paneElement","eq","pane","css","collapsed","splitter","insertAfter","push","pop","markerAttribute","_resizable","Resizable","handle","clickMoveClick","invalidClass","resizeend","find","remove","resize","e","delta","splitterBarIndex","_getElementIndex","currentTarget","splitterBar","rtlModifier","support","isRtl","x","y","leftPane","rightPane","_dragSplitterBar","trigger","start","_onResizeStart","bind","_getAdjacentPanes","leftPaneNewSize","computedSize","isLeftPaneSizeInBounds","min","max","panesWithoutSize","_getPaneElements","filter","style","canResizeBothPanes","_resizePane","leftPaneIndex","rightPaneIndex","leftPaneELement","_getPaneElement","rightPaneELement","_getPane","leftPaneSize","_getPaneOffsetSize","rightPaneSize","totalPaneSize","splitterSize","_getElementClientSize","getPixelSize","paneSize","_calculatePixelSize","leftPaneMaxSize","rightPaneMaxSize","_getAdjacentPanesMaxSize","rightMaxPixelSize","leftMaxPixelSize","index","collapsible","constrainedSize","value","Math","newSize","toPercentages","parseFloat","toPixel","_setPaneSize","_allExpandedPanesHaveSize","expandedPanes","paneIndex","_getPaneSizes","containerSize","numericSize","_getElementOffsetSize","rect","getBoundingClientRect","width","height","_getElementSize","sizeType","_getPaneIndex","indexOf","leftPaneMinSize","leftPaneMaxPixelSize","rightPaneMinSize","rightPaneMaxPixelSize","stopPropagation","_addResizeOverlays","_addResizeOverlay","overlay","append","Array","from","hasClass","childrenSelector","parent","matches","destroy","off","empty","DockManager","panesContainer","appendTo","_processPanes","rootPane","_refreshToolbar","_createPane","_bindEvents","_initNavigator","_initUnpinnedResizable","name","type","paneDefaults","visible","closeable","actions","icon","shouldAdd","unpinnable","unpinned","minimizable","maximizable","indicators","top","left","transform","previewTop","previewLeft","rotate","hoveredPaneHeight","draggedPaneHeight","hoveredPaneWidth","draggedPaneWidth","togglePane","id","_getPaneById","_togglePane","removePane","_removePane","getOptions","setOptions","currentOptions","deepExtend","_unpinnedResizable","unpinnedContainer","containerWidth","on","_toolbarButtonClick","_hideUnpinnedPanes","_pinPaneClick","_closePane","_displayDockPreview","_hideDockPreview","currentlyOpened","unpinnedContainerVisible","is","_toolbar","removeClass","itemUid","preventDefault","_showUnpinnedPane","paneUid","toolbarWidth","outerWidth","_findPaneByUid","hasUnpinnedSize","unpinnedSize","button","isTabbed","action","closest","isUnpinned","parentPane","parentUid","eventData","_refreshRootPane","toggleClass","event","splice","_shouldHideParent","some","_refreshPane","parentElement","_extendPane","forEach","childPane","j","subItem","unpinnedPanes","_unpinnedPanes","unpinnedPannesContainer","insertBefore","prepend","html","renderButton","fillMode","_paneHeader","wrapper","refresh","rootPaneElement","_createSplitPane","splitterElement","splitterOptions","paneOptions","_createUnpinnedPane","_updatePaneSize","ev","_createTabPane","tabStripElement","tabContainer","tabStripOptions","animation","activate","sender","tabGroup","item","selectedPane","selected","tab","title","contentElement","_addActions","kendoTabStrip","_createContentPane","content","template","data","isUnnpinned","actionsContainer","themeColor","string","charAt","toUpperCase","slice","result","concat","header","tabHeader","found","prop","params","navigatorDraggable","Draggable","autoScroll","hint","actionsHtml","_getActionButtons","hintTemplate","updateHint","coordinates","location","zIndex","dragstart","_dragStart","dragend","_dragEnd","drag","_drag","target","draggedPane","_displayGlobalIndicators","draggableEvent","hoveredIndicator","hide","_updateLayout","_showHiddenPanes","hoveredPane","currentPane","elementUnderCursor","navigator","currentPaneUid","prevPaneUid","dragTargetUid","position","dockable","innerDock","_showTab","_showPane","tabstrip","show","activateTab","splitbar","siblings","_hideDraggedPane","draggedElement","_hideTab","_hidePane","prevElement","prev","nextElement","next","isActive","buttons","container","each","_","clone","indicator","isGlobalIndicator","indicatorName","indicatorUid","indicatorData","previewElement","containerHeight","outerHeight","existingPreview","preview","draggedPaneParent","draggedPaneIndex","_tabDock","_splitDock","_adjustSiblingSizes","targetPane","isGlobalDock","targetPaneParent","targetPaneIndex","dimension","newParentPane","unshift","_getSiblings","parentSize","draggedPaneSize","newParentSize","noSizePanes","freeSpace","_calculateNewSize","noSizePane","proportion","noUnitSize","unit","replace","p","plugin","jQuery"],"sources":["kendo.dockmanager.js"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('kendo.core.js'), require('kendo.splitter.js'), require('kendo.tabstrip.js'), require('kendo.window.js'), require('kendo.html.button.js'), require('kendo.resizable.js'), require('kendo.draganddrop.js')) :\n    typeof define === 'function' && define.amd ? define(['kendo.core', 'kendo.splitter', 'kendo.tabstrip', 'kendo.window', 'kendo.html.button', 'kendo.resizable', 'kendo.draganddrop'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendodockmanager = global.kendodockmanager || {}, global.kendodockmanager.js = factory()));\n})(this, (function () {\n    const __meta__ = {\n        id: \"dockManager\",\n        name: \"DockManager\",\n        category: \"web\",\n        description: \"The DockManager widget represents a layout component that allows users to achieve custom layouts by docking panes.\",\n        depends: [\"core\", \"splitter\", \"tabstrip\", \"window\", \"html.button\"]\n    };\n\n    (function($, undefined$1) {\n        const kendo = window.kendo,\n            Widget = kendo.ui.Widget,\n            NS = \".kendoDockManager\",\n            ui = kendo.ui,\n            extend = $.extend,\n            pxUnitsRegex = /^\\d+(\\.\\d+)?px$/i,\n            percentageUnitsRegex = /^\\d+(\\.\\d+)?%$/i,\n            isPlainObject = $.isPlainObject,\n            DOCK_MANAGER = \"k-dock-manager\",\n            DOCK_MANAGER_TOOLBAR = \"k-dock-manager-toolbar\",\n            TOOLBAR_TEMPLATE = `<div class=\"${DOCK_MANAGER_TOOLBAR} k-toolbar-left k-toolbar k-toolbar-md\"></div>`,\n            TOOLBAR_BUTTON = \"k-toolbar-button\",\n            SEPARATOR = `<div class=\"k-separator k-separator-horizontal\"></div>`,\n            KSTATIC_PANE = \"k-pane-static\",\n            KKPINNED_PANE = \"k-pane-pinned\",\n            KKUNPINNED_PANE = \"k-pane-unpinned\",\n            KPANE_TABBED = \"k-pane-tabbed\",\n            SPLITTER = \"k-splitter\",\n            KSPLITBAR = \"k-splitbar\",\n            SPLITTER_FLEX = \"k-splitter-flex\",\n            DOCK_SPLITTER = \"k-dock-manager-splitter\",\n            KUNPINNED_CONTAINER = \"k-dock-manager-unpinned-container\",\n            PANE_SIZING_PROP = \"flex-basis\",\n            HORIZONTAL = \"horizontal\",\n            VERTICAL = \"vertical\",\n            KHIDDEN = \"k-hidden\",\n            KBUTTON = \"k-button\",\n            KBUTTON_PRIMARY = \"k-button-flat-primary\",\n            KBUTTON_BASE = \"k-button-flat-base\",\n            MAX_NUMBER_VALUE = Number.MAX_SAFE_INTEGER,\n            KPANE = \"k-pane\",\n            KPANE_FLEX = \"k-pane-flex\",\n            KPANES_CONTAINER = \"k-dock-manager-pane-container\",\n            KPANE_SCROLLABLE = \"k-pane-scrollable\",\n            KPANE_ACTIONS = \"k-pane-actions\",\n            KDOCK_INDICATOR = \"k-dock-indicator\",\n            KDOCK_NAVIGATOR = \"k-dock-navigator\",\n            KDOCK_PREVIEW = \"k-docking-preview\",\n            KSELECTED = \"k-selected\",\n            KACTIVE = \"k-active\",\n            KTABSTRIP = \"k-tabstrip\",\n            KSPLITBAR_DRAGGABLE = \"k-splitbar-draggable\",\n            SPLIT = \"split\",\n            TAB = \"tab\",\n            CONTENT = \"content\",\n            HEIGHT = \"height\",\n            WIDTH = \"width\",\n            TOP = \"top\",\n            BOTTOM = \"bottom\",\n            LEFT = \"left\",\n            RIGHT = \"right\",\n            MIDDLE = \"middle\",\n            CLICK = \"click\",\n            PIN = \"pin\",\n            UNPIN = \"unpin\",\n            UNSHIFT = \"unshift\",\n            PUSH = \"push\",\n            PANE = `<div class=\"${KPANE} ${KPANE_FLEX} ${KSTATIC_PANE}\"></div>`,\n            paneSelector = uid => `.${KPANE}[${kendo.attr(\"uid\")}=\"${uid}\"]`,\n            buttonTextTemplate = text => `<span class=\"k-button-text\">${text}</span>`,\n            contentPaneTemplate = data => `<div class=\"${KPANE_SCROLLABLE}\">\n                                            <div class=\"k-pane-header\">\n                                                <span class=\"k-pane-title\">${data.title}</span>\n                                                <div class=\"${KPANE_ACTIONS}\"></div>\n                                            </div>\n                                            <div class=\"k-pane-content\">${data.content}</div>\n                                        </div>`,\n            tabTemplate = title => `<li><span class=\"k-link\">${title}</span></li>`,\n            unpinnedResizeSplitbar = `<div class=\"k-splitbar k-splitbar-horizontal ${KSPLITBAR_DRAGGABLE}-horizontal\">\n                                    <div class=\"k-resize-handle\"></div>\n                                </div>`,\n            UID_ATTR = kendo.attr(\"uid\"),\n            INDICATOR_ATTR = kendo.attr(\"indicator\"),\n            ACTION_ATTR = kendo.attr(\"action\"),\n            hintTemplate = pane => `<div class=\"k-tooltip k-tooltip-primary\">\n                                    <div class=\"k-tooltip-content\">${pane.title}</div>\n                                </div>`,\n            INDICATOR_TEMPLATE = `<div class=\"${KDOCK_INDICATOR}\">\n                        <span class=\"k-svg-icon k-icon-xl k-svg-i-position-top\">\n                        <svg aria-hidden=\"true\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                            <path d=\"M480 448V32H32v448h448v-32zm-416 0V64h384v384H64zM96 96h320v96H96z\"></path>\n                        </svg>\n                        </span>\n                    </div>`,\n            NAVIGATOR_TEMPLATE = `<div class=\"${KDOCK_NAVIGATOR}\" style=\"position: relative;\">\n                                <div class=\"k-dock-indicator k-dock-indicator-top\" ${INDICATOR_ATTR}=\"top\">\n                                <span class=\"k-svg-icon k-icon-xl k-svg-i-position-top\">\n                                    <svg aria-hidden=\"true\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                                        <path d=\"M480 448V32H32v448h448v-32zm-416 0V64h384v384H64zM96 96h320v96H96z\"></path>\n                                    </svg>\n                                </span>\n                                </div>\n                                <div class=\"k-dock-indicator k-dock-indicator-right\" ${INDICATOR_ATTR}=\"right\">\n                                <span class=\"k-svg-icon k-icon-xl k-svg-i-position-right\">\n                                    <svg aria-hidden=\"true\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                                        <path d=\"M64 480h416V32H32v448h32zm0-416h384v384H64V64zm256 32h96v320h-96z\"></path>\n                                    </svg>\n                                </span>\n                                </div>\n                                <div class=\"k-dock-indicator k-dock-indicator-bottom\" ${INDICATOR_ATTR}=\"bottom\">\n                                <span class=\"k-svg-icon k-icon-xl k-svg-i-position-bottom\">\n                                    <svg aria-hidden=\"true\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                                        <path d=\"M32 64v416h448V32H32v32zm416 0v384H64V64h384zM96 320h320v96H96z\"></path>\n                                    </svg>\n                                </span>\n                                </div>\n                                <div class=\"k-dock-indicator k-dock-indicator-left\" ${INDICATOR_ATTR}=\"left\">\n                                <span class=\"k-svg-icon k-icon-xl k-svg-i-position-left\">\n                                    <svg aria-hidden=\"true\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                                        <path d=\"M448 32H32v448h448V32h-32zm0 416H64V64h384v384zM96 96h96v320H96z\"></path>\n                                    </svg>\n                                </span>\n                                </div>\n                                <div class=\"k-dock-indicator k-dock-indicator-middle\" ${INDICATOR_ATTR}=\"middle\">\n                                <span class=\"k-svg-icon k-icon-xl k-svg-i-window\">\n                                    <svg aria-hidden=\"true\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                                        <path d=\"M96 96v320h320V96H96zm288 288H128V192h256v192z\"></path>\n                                    </svg>\n                                </span>\n                                </div>\n                            </div>`,\n            SPLITBAR = (splitter) => $(`<div class=\"${KSPLITBAR} ${KSPLITBAR}-${splitter.options.orientation} ${KSPLITBAR_DRAGGABLE}-${splitter.options.orientation}\" ${kendo.attr(\"marker\")}=\"${splitter._marker}\" >\n                        <div class=\"k-resize-handle\"></div>\n                    </div>`),\n            CLOSE = \"close\",\n            DOCK = \"dock\",\n            INNER_DOCK = \"innerDock\",\n            RESIZE = \"resize\",\n            DRAG = \"drag\",\n            DRAGSTART = \"dragStart\",\n            DRAGEND = \"dragEnd\",\n            CHANGE = \"change\";\n\n        function capitalizeFirstLetter(string) {\n            return string.charAt(0).toUpperCase() + string.slice(1);\n        }\n\n        function isPercentageSize(size) {\n            return percentageUnitsRegex.test(size);\n        }\n\n        function isPixelSize(size) {\n            return pxUnitsRegex.test(size) || /^\\d+$/.test(size);\n        }\n\n        function isFluid(size) {\n            return !isPercentageSize(size) && !isPixelSize(size);\n        }\n\n        function calculateSize(size, total) {\n            let output = parseInt(size, 10);\n\n            if (isPercentageSize(size)) {\n                output = Math.floor(output * total / 100);\n            }\n\n            return output;\n        }\n\n        function toPercentages(value) {\n            return `${value}%`;\n        }\n\n        function toPixel(value ) {\n            return kendo.parseFloat(value) + \"px\";\n        }\n\n        function percentage(partialValue, totalValue) {\n            return (100 * partialValue) / totalValue;\n        }\n\n        function clamp(value, min, max) {\n            return Math.min(max, Math.max(min, value));\n        }\n\n        const DockSplitter = Widget.extend({\n            init: function(element, options) {\n                const that = this;\n\n                Widget.fn.init.call(that, element, options);\n                options = $.extend(true, {}, options);\n                that._marker = kendo.guid().substring(0, 8);\n                that.element.addClass(`${SPLITTER} ${SPLITTER_FLEX} ${SPLITTER}-${options.orientation} ${DOCK_SPLITTER}`);\n                that._initPanes();\n                that._initResizable();\n                kendo.notify(that);\n            },\n\n            options: {\n                orientation: \"horizontal\",\n                panes: []\n            },\n\n            events: [\n                RESIZE\n            ],\n\n            _initPanes: function() {\n                const that = this;\n                const paneElements = that.element.children();\n                const panesCount = paneElements.length;\n                const orientation = that.options.orientation;\n                const markerAttribute = kendo.attr(\"marker\");\n                const sizedPanes = [];\n\n                for (let i = 0; i < panesCount; i++) {\n                    const paneElement = paneElements.eq(i);\n                    let pane = that.options.panes[i];\n\n                    if (!pane) {\n                        pane = that.options.panes[i] = {};\n                    }\n\n                    pane.size = pane.size || \"auto\";\n                    paneElement.attr(kendo.attr(\"uid\"), pane.uid)\n                                .attr(\"role\", \"group\")\n                                .css(\"flex-basis\", pane.size)\n                                .addClass();\n\n                    if (pane.collapsed) {\n                        pane.css(\"display\", \"none\");\n                    }\n\n                    if (i < panesCount - 1 && !that.options.panes[i + 1].collapsed) {\n                        let splitbar = SPLITBAR(that);\n\n                        splitbar.insertAfter(paneElement);\n                    }\n\n                    if (pane.size) {\n                        sizedPanes.push(paneElement);\n                    }\n                }\n\n                if (sizedPanes.length === 1 && panesCount > 1) {\n                    sizedPanes.pop().addClass(KSTATIC_PANE);\n                }\n            },\n\n            _initResizable: function() {\n                const that = this;\n                const orientation = that.options.orientation;\n                const markerAttribute = kendo.attr(\"marker\");\n\n                that._resizable = new kendo.ui.Resizable(that.element, {\n                    orientation: orientation,\n                    handle: `[${markerAttribute}=${that._marker}].${KSPLITBAR_DRAGGABLE}-${orientation} `,\n                    clickMoveClick: that.options.clickMoveClick,\n                    invalidClass: \"k-restricted-size-\" + orientation,\n                    resizeend: function() {\n                        that.element.find(\".k-splitter-overlay\").remove();\n                    },\n                    resize: function(e) {\n                        const axis = orientation === HORIZONTAL ? 'x' : 'y';\n                        let delta;\n                        const splitterBarIndex = that._getElementIndex(e.currentTarget, `.${KSPLITBAR}`);\n                        const splitterBar = e.currentTarget;\n\n                        if (orientation === HORIZONTAL) {\n                            const rtlModifier = kendo.support.isRtl(that.element) ? -1 : 1;\n                            delta = e.x.delta * rtlModifier;\n                        } else {\n                            delta = e.y.delta;\n                        }\n\n                        const { leftPane, rightPane } = that._dragSplitterBar(splitterBar, splitterBarIndex, delta);\n                        that.trigger(RESIZE, { leftPane: leftPane, rightPane: rightPane });\n                    },\n                    start: that._onResizeStart.bind(that)\n                });\n\n            },\n\n            _dragSplitterBar: function(splitterBar, splitterBarIndex, delta) {\n                const that = this;\n                const { leftPane, rightPane } = that._getAdjacentPanes(splitterBar, splitterBarIndex);\n\n                const leftPaneNewSize = leftPane.computedSize + delta;\n                const isLeftPaneSizeInBounds = leftPaneNewSize > leftPane.min && leftPaneNewSize < leftPane.max;\n\n                const panesWithoutSize = that._getPaneElements().filter(x => !x.style[PANE_SIZING_PROP]);\n                const canResizeBothPanes = (leftPane.size || rightPane.size) && panesWithoutSize.length > 1;\n\n                if ((leftPane.size && rightPane.size) || canResizeBothPanes) {\n                    if (isLeftPaneSizeInBounds) {\n                        that._resizePane(leftPane, delta);\n                        that._resizePane(rightPane, -delta);\n                    }\n                } else if (rightPane.size) {\n                    that._resizePane(rightPane, -delta);\n                } else {\n                    that._resizePane(leftPane, delta);\n                }\n                return { leftPane, rightPane };\n            },\n\n            _getAdjacentPanes: function(splitterBar, splitterBarIndex) {\n                const that = this;\n                const leftPaneIndex = splitterBarIndex;\n                const rightPaneIndex = splitterBarIndex + 1;\n\n                const leftPaneELement = that._getPaneElement(leftPaneIndex);\n                const rightPaneELement = that._getPaneElement(rightPaneIndex);\n\n                const leftPane = that._getPane(leftPaneIndex);\n                const rightPane = that._getPane(rightPaneIndex);\n\n                const leftPaneSize = that._getPaneOffsetSize(leftPaneIndex);\n                const rightPaneSize = that._getPaneOffsetSize(rightPaneIndex);\n\n                const totalPaneSize = leftPaneSize + rightPaneSize;\n                const splitterSize = that._getElementClientSize(that.element, that.options.orientation);\n                const getPixelSize = paneSize => that._calculatePixelSize(paneSize, splitterSize);\n\n                const { leftPaneMaxSize, rightPaneMaxSize } = that._getAdjacentPanesMaxSize(leftPaneIndex, rightPaneIndex);\n                const rightMaxPixelSize = getPixelSize(rightPane && rightPane.max);\n                const leftMaxPixelSize = getPixelSize(leftPane && leftPane.max);\n\n                return {\n                    leftPane: {\n                        index: leftPaneIndex,\n                        computedSize: leftPaneSize,\n                        min: getPixelSize(leftPane && leftPane.min) || ( rightMaxPixelSize ? totalPaneSize - rightMaxPixelSize : 0 ) || 0,\n                        max: leftPaneMaxSize,\n                        size: leftPaneELement.style[PANE_SIZING_PROP],\n                        collapsible: leftPane && leftPane.collapsible,\n                        uid: leftPane.uid\n                    },\n                    rightPane: {\n                        index: rightPaneIndex,\n                        computedSize: rightPaneSize,\n                        min: getPixelSize(rightPane && rightPane.min) || (leftMaxPixelSize ? totalPaneSize - leftMaxPixelSize : 0) || 0,\n                        max: rightPaneMaxSize,\n                        size: rightPaneELement.style[PANE_SIZING_PROP],\n                        collapsible: rightPane && rightPane.collapsible,\n                        uid: rightPane.uid\n                    }\n                };\n            },\n\n            _resizePane: function(pane, delta) {\n                const that = this;\n                const constrainedSize = clamp(pane.computedSize + delta, pane.min, pane.max);\n                let newSize = \"\";\n\n                if (isPercentageSize(pane.size)) {\n                    const splitterSize = that._getElementClientSize(that.element, that.options.orientation);\n                    newSize = toPercentages(100 * constrainedSize / splitterSize);\n                } else {\n                    newSize = toPixel(constrainedSize);\n                }\n                pane.size = newSize;\n                that._setPaneSize(pane.index, newSize);\n            },\n\n            _allExpandedPanesHaveSize: function() {\n                const that = this;\n                const expandedPanes = that.options.panes.filter(x=> !x.collapsed);\n\n                if (expandedPanes.length) {\n                    return expandedPanes.filter(x=> x.size).length;\n                }\n\n                return false;\n            },\n\n            _setPaneSize: function(paneIndex, size) {\n                const that = this;\n                const paneElement = that._getPaneElement(paneIndex);\n\n                if (!paneElement) {\n                    return;\n                }\n\n                if (!that._allExpandedPanesHaveSize()) {\n                    $(paneElement).addClass(KSTATIC_PANE);\n                }\n\n                paneElement.style[PANE_SIZING_PROP] = size;\n            },\n\n            _getPaneSizes: function(paneIndex) {\n                const that = this;\n                const splitterSize = that._getElementClientSize(that.element, that.options.orientation);\n                const pane = that._getPane(paneIndex);\n                const paneSize = that._getPaneOffsetSize(paneIndex);\n                const paneMinSize = pane && pane.min ? that._calculatePixelSize(pane.min, splitterSize) : 0;\n                const paneMaxSize = pane && pane.max ? that._calculatePixelSize(pane.max, splitterSize) : MAX_NUMBER_VALUE;\n\n                return {\n                    size: paneSize,\n                    min: paneMinSize,\n                    max: paneMaxSize\n                };\n            },\n\n            _calculatePixelSize: function(size, containerSize) {\n                let numericSize = kendo.parseFloat(size);\n\n                if (isPercentageSize(size)) {\n                    numericSize = (containerSize * numericSize / 100);\n                }\n\n                return numericSize;\n            },\n\n            _getPaneOffsetSize: function(paneIndex) {\n                const that = this;\n                const paneElement = that._getPaneElement(paneIndex);\n                const size = that._getElementOffsetSize(paneElement, that.options.orientation);\n                return size;\n            },\n\n\n            _getElementOffsetSize: function(element, orientation) {\n                if (!element) {\n                    return 0;\n                }\n\n                const rect = element.getBoundingClientRect();\n\n                if (orientation === HORIZONTAL) {\n                    return rect.width;\n                } else {\n                    return rect.height;\n                }\n            },\n\n            _getElementClientSize: function(element, orientation) {\n                const that = this;\n\n                return that._getElementSize(element, orientation, \"client\");\n            },\n\n            _getElementSize: function(element, orientation, sizeType) {\n                if (!element) {\n                    return 0;\n                }\n\n                element = element[0];\n\n                if (orientation === HORIZONTAL) {\n                    return element[`${sizeType}Width`];\n                } else {\n                    return element[`${sizeType}Height`];\n                }\n            },\n\n            _getPane: function(paneIndex) {\n                const that = this;\n\n                return (that.options.panes || [])[paneIndex];\n            },\n\n            _getPaneIndex: function(pane) {\n                const that = this;\n\n                return that.options.panes.indexOf(pane);\n            },\n\n            _getAdjacentPanesMaxSize: function(leftPaneIndex, rightPaneIndex) {\n                const that = this;\n                const {\n                    size: leftPaneSize,\n                    min: leftPaneMinSize,\n                    max: leftPaneMaxPixelSize\n                } = that._getPaneSizes(leftPaneIndex);\n\n                const {\n                    size: rightPaneSize,\n                    min: rightPaneMinSize,\n                    max: rightPaneMaxPixelSize\n                } = that._getPaneSizes(rightPaneIndex);\n\n                const totalPaneSize = leftPaneSize + rightPaneSize;\n\n                const leftPaneMaxSize = Math.min(leftPaneMaxPixelSize, totalPaneSize - rightPaneMinSize);\n                const rightPaneMaxSize = Math.min(rightPaneMaxPixelSize, totalPaneSize - leftPaneMinSize);\n\n                return {\n                    leftPaneMaxSize,\n                    rightPaneMaxSize\n                };\n            },\n\n            _onResizeStart: function(e) {\n                const that = this;\n\n                e.stopPropagation();\n\n                const splitterBarIndex = that._getElementIndex(e.currentTarget, `.${SPLITTER}`);\n\n                that._addResizeOverlays(splitterBarIndex);\n            },\n\n            _addResizeOverlays: function(splitterBarIndex) {\n                const that = this;\n\n                that._addResizeOverlay(splitterBarIndex);\n                that._addResizeOverlay(splitterBarIndex + 1);\n            },\n\n            _addResizeOverlay: function(paneIndex) {\n                const that = this;\n                const paneElement = that._getPaneElement(paneIndex);\n\n                if (!paneElement) {\n                    return;\n                }\n\n                const overlay = $(`<div class=\"k-splitter-overlay k-overlay\"></div>`);\n\n                $(paneElement).append(overlay);\n            },\n\n\n            _getPaneElement: function(paneIndex) {\n                const that = this;\n                const panes = that._getPaneElements();\n                return panes[paneIndex];\n            },\n\n            _getPaneElements: function() {\n                const that = this;\n                const panes = Array.from(that.element.children() || []).filter(x => $(x).hasClass(\"k-pane\") || $(x).hasClass(\"k-splitter\"));\n                return panes;\n            },\n\n            _getElementIndex: function(element, childrenSelector) {\n                if (!element) {\n                    return [].indexOf(element);\n                }\n\n                let children = Array.from(element.parent().children());\n\n                if (childrenSelector) {\n                    children = children.filter(x => x.matches(childrenSelector));\n                }\n\n                return Array.from(children).indexOf(element[0]);\n            },\n\n            destroy: function() {\n                const that = this;\n\n                Widget.fn.destroy.call(that);\n\n                that.element.off(NS);\n                that.element.empty();\n\n                that._resizable.destroy();\n                kendo.destroy(that.element);\n            }\n        });\n\n        const DockManager = Widget.extend({\n            init: function(element, options) {\n                const that = this;\n\n                Widget.fn.init.call(that, element, options);\n                options = $.extend(true, {}, options);\n                that.element.addClass(DOCK_MANAGER);\n\n                that.panesContainer = $(`<div class=\"${KPANES_CONTAINER}\" />`).appendTo(that.element);\n                that._processPanes(that.options.rootPane);\n                that._refreshToolbar();\n                that._createPane(that.panesContainer, that.options.rootPane);\n                that._bindEvents();\n                that._initNavigator();\n                that._initUnpinnedResizable();\n\n                kendo.notify(that);\n            },\n\n            events: [\n                CLOSE,\n                PIN,\n                UNPIN,\n                DOCK,\n                INNER_DOCK,\n                RESIZE,\n                DRAG,\n                DRAGSTART,\n                DRAGEND\n            ],\n\n            options: {\n                name: 'DockManager',\n                rootPane: {\n                    type: SPLIT,\n                    orientation: HORIZONTAL,\n                    panes: []\n                }\n            },\n\n            paneDefaults: {\n                visible: true,\n                closeable: true,\n                collapsed: false,\n                size: ''\n            },\n\n            actions: [\n                {\n                    name: \"pin\",\n                    icon: \"unpin\",\n                    shouldAdd: pane => pane.unpinnable && pane.unpinnable.unpinned\n                },{\n                    name: \"unpin\",\n                    icon: \"pin\",\n                    shouldAdd: pane => pane.unpinnable && !pane.unpinnable.unpinned\n                },{\n                    name: \"minimize\",\n                    icon: \"minimize\",\n                    shouldAdd: pane => pane.minimizable\n                },{\n                    name: \"maximize\",\n                    icon: \"maximize\",\n                    shouldAdd: pane => pane.maximizable\n                },{\n                    name: \"close\",\n                    icon: \"x\",\n                    shouldAdd: pane => pane.closeable != false\n                },{\n                    name: \"more\",\n                    icon: \"more-vertical\",\n                    shouldAdd: pane => false //not needed for v1 as currently only 2 actions are available\n                }\n            ],\n\n            indicators: [\n                {\n                    name: TOP,\n                    top: 0,\n                    left: \"50%\",\n                    transform: \"translate(-50%, 0)\",\n                    previewTop: () => 0,\n                    previewLeft: () => 0,\n                    rotate: \"0deg\"\n                },{\n                    name: BOTTOM,\n                    top: \"100%\",\n                    left: \"50%\",\n                    transform: \"translate(-50%, -100%)\",\n                    previewTop: (hoveredPaneHeight, draggedPaneHeight) => hoveredPaneHeight - draggedPaneHeight,\n                    previewLeft: () => 0,\n                    rotate: \"180deg\"\n                },{\n                    name: LEFT,\n                    top: \"50%\",\n                    left: 0,\n                    transform: \"translate(0, -50%)\",\n                    previewTop: () => 0,\n                    previewLeft: () => 0,\n                    rotate: \"270deg\"\n                },{\n                    name: RIGHT,\n                    top: \"50%\",\n                    left: \"100%\",\n                    transform: \"translate(-100%, -50%)\",\n                    previewTop: () => 0,\n                    previewLeft: (hoveredPaneWidth, draggedPaneWidth) => hoveredPaneWidth - draggedPaneWidth,\n                    rotate: \"90deg\"\n                },{\n                    name: MIDDLE,\n                    previewTop: () => 0,\n                    previewLeft: () => 0,\n                }\n            ],\n\n            togglePane: function(id) {\n                const that = this,\n                pane = that._getPaneById(that.options.rootPane, \"id\", id);\n\n                if (pane != undefined$1) {\n                    that._togglePane(pane);\n                }\n            },\n\n            removePane: function(id) {\n                const that = this;\n                const pane = that._getPaneById(that.options.rootPane, \"id\", id);\n\n                if (pane != undefined$1) {\n                    that._removePane(pane);\n                }\n            },\n\n            getOptions: function() {\n                const that = this;\n                return that.options;\n            },\n\n            setOptions: function(options) {\n                const that = this;\n                let currentOptions = that.getOptions();\n                kendo.deepExtend(currentOptions, options);\n\n                that.destroy();\n                that.element.empty();\n\n                that.init(that.element, currentOptions);\n\n            },\n\n            _initUnpinnedResizable: function() {\n                const that = this;\n\n                that._unpinnedResizable = new kendo.ui.Resizable(that.unpinnedContainer, {\n                    orientation: HORIZONTAL,\n                    handle: \".k-splitbar-horizontal.k-splitbar-draggable-horizontal\",\n                    resize: function(e) {\n                        const delta = e.x.delta;\n                        const containerWidth = that.unpinnedContainer.width();\n\n                        that.unpinnedContainer.width(containerWidth + delta);\n                    }\n                });\n            },\n\n            _bindEvents: function() {\n                const that = this;\n\n                that.element.on(CLICK + NS, `.k-dock-manager-toolbar .${KBUTTON}`, that._toolbarButtonClick.bind(that));\n                that.element.on(CLICK + NS, `.${KPANES_CONTAINER}`, that._hideUnpinnedPanes.bind(that));\n                that.element.on(CLICK + NS, `.${KBUTTON}[${ACTION_ATTR}=\"pin\"], .${KBUTTON}[${ACTION_ATTR}=\"unpin\"]`, that._pinPaneClick.bind(that));\n                that.element.on(CLICK + NS, `.${KBUTTON}[${ACTION_ATTR}=\"close\"]`, that._closePane.bind(that));\n                that.element.on(\"mouseenter\" + NS, `.${KDOCK_INDICATOR}`, that._displayDockPreview.bind(that));\n                that.element.on(\"mouseleave\" + NS, `.${KDOCK_INDICATOR}`, that._hideDockPreview.bind(that));\n            },\n\n            _hideUnpinnedPanes: function(e) {\n                const that = this;\n                const unpinnedPanes = that.unpinnedContainer.find(`.${KPANE}`);\n                const currentlyOpened = unpinnedPanes.filter(\":visible\");\n                const unpinnedContainerVisible = that.unpinnedContainer.is(\":visible\");\n\n                if (currentlyOpened && unpinnedContainerVisible) {\n                    that._toolbar.find(`.${KSELECTED}`).removeClass(KSELECTED);\n                    that.unpinnedContainer.addClass(KHIDDEN);\n                    return;\n                }\n            },\n\n            _toolbarButtonClick: function(e) {\n                const that = this;\n                const itemUid = $(e.currentTarget).attr(UID_ATTR);\n                const unpinnedPanes = that.unpinnedContainer.find(`.${KPANE}`);\n                const currentlyOpened = unpinnedPanes.filter(\":visible\");\n                const unpinnedContainerVisible = that.unpinnedContainer.is(\":visible\");\n\n                e.preventDefault();\n                that._toolbar.find(`.${KBUTTON}`).removeClass(KSELECTED);\n\n                if (currentlyOpened.attr(UID_ATTR) === itemUid && unpinnedContainerVisible) {\n                    that.unpinnedContainer.addClass(KHIDDEN);\n                    return;\n                }\n\n                that._showUnpinnedPane(itemUid);\n            },\n\n            _showUnpinnedPane: function(paneUid) {\n                const that = this;\n                const toolbarWidth = that._toolbar.outerWidth();\n                const pane = that._findPaneByUid(paneUid);\n                const hasUnpinnedSize = pane.unpinnable.unpinnedSize;\n\n                that.unpinnedContainer.removeClass(KHIDDEN).css({ left: `${toolbarWidth}px` });\n                that.unpinnedContainer.find(`.${KPANE}`).addClass(KHIDDEN);\n                that.unpinnedContainer.find(paneSelector(paneUid)).removeClass(KHIDDEN);\n\n                if (hasUnpinnedSize) {\n                    that.unpinnedContainer.css({ width: `${pane.unpinnable.unpinnedSize}` });\n                }\n\n                that._toolbar.find(`.${KBUTTON}[${UID_ATTR}=\"${paneUid}\"]`).addClass(KSELECTED);\n            },\n\n            _pinPaneClick: function(e) {\n                const that = this;\n                const button = $(e.currentTarget);\n                const isTabbed = button.parent().is(\"li\");\n                const action = button.attr(ACTION_ATTR);\n                const paneElement = isTabbed ? button.parent() : $(e.currentTarget).closest(`.${KPANE}`);\n                const pane = that._findPaneByUid(paneElement.attr(UID_ATTR));\n                const isUnpinned = pane.unpinnable.unpinned;\n                const parentPane = that._findPaneByUid(pane.parentUid);\n                const parentPaneElement = that.panesContainer.find(`.${KPANE}[${UID_ATTR}=\"${parentPane.uid}\"], .${SPLITTER}[${UID_ATTR}=\"${parentPane.uid}\"]`);\n                const eventData = { pane: pane, paneElement: paneElement };\n\n                if (isUnpinned) {\n                    kendo.destroy(paneElement);\n                    paneElement.remove();\n                }\n\n                pane.unpinnable.unpinned = action === PIN ? false : true;\n                that._refreshRootPane();\n                that.unpinnedContainer.toggleClass(KHIDDEN, action === PIN);\n                that.unpinnedContainer.find(`.${KPANE}`).removeClass(KKPINNED_PANE).addClass(KKUNPINNED_PANE);\n\n                if (action === \"pin\") {\n                    that.trigger(PIN, eventData);\n                    return;\n                }\n\n                that.trigger(UNPIN, eventData);\n                that._showUnpinnedPane(pane.uid);\n            },\n\n            _closePane: function(e) {\n                const that = this;\n                const button = $(e.currentTarget);\n                const isTabbed = button.parent().is(\"li\");\n                const paneElement = isTabbed ? button.parent() : $(e.currentTarget).closest(`.${KPANE}`);\n                const pane = that._findPaneByUid(paneElement.attr(UID_ATTR));\n                const parentPane = that._findPaneByUid(pane.parentUid);\n                const parentPaneElement = that.panesContainer.find(`.${KPANE}[${UID_ATTR}=\"${parentPane.uid}\"], .${SPLITTER}[${UID_ATTR}=\"${parentPane.uid}\"]`);\n                const paneIndex = parentPane.panes.indexOf(pane);\n                const eventData = { pane: pane, paneElement: paneElement, event: e };\n\n                if (that.trigger(CLOSE, eventData)) {\n                    e.preventDefault();\n                }\n\n                if (pane.unpinnable && pane.unpinnable.unpinned) {\n                    that.unpinnedContainer.addClass(KHIDDEN);\n                }\n\n                parentPane.panes.splice(paneIndex, 1);\n\n                if (that._shouldHideParent(parentPane)) {\n                    parentPane.visible = false;\n                }\n\n                that._refreshRootPane();\n            },\n\n            _shouldHideParent: function(pane) {\n                const that = this,\n                parent = that._findPaneByUid(pane.parentUid);\n\n                if (pane.panes.length == 0) {\n                    if (pane.type == TAB && parent.panes.length == 1) {\n                        parent.panes.splice(0,1);\n                        parent.visible = false;\n                    }\n                    return true;\n                }\n\n                if (pane.panes.length == 1 &&\n                    pane.panes[0].type == TAB &&\n                    !pane.panes.some(x => x.visible)) {\n                    return true;\n                }\n\n                return false;\n            },\n\n            _refreshPane: function(paneElement, pane) {\n                const that = this;\n                const parentElement = paneElement.parent();\n                const isTabbed = paneElement.is(`.${KPANE_TABBED}`);\n\n                kendo.destroy(paneElement);\n                isTabbed ? paneElement.empty() : paneElement.remove();\n                that._refreshToolbar();\n                that._createPane(isTabbed ? paneElement : parentElement, pane);\n            },\n\n            _processPanes: function(pane) {\n                const that = this;\n                pane.uid = pane.uid || kendo.guid();\n                that._extendPane(pane);\n\n                if (pane.type === SPLIT && !pane.orientation) {\n                    pane.orientation = HORIZONTAL;\n                }\n\n                pane.panes.forEach((childPane) => {\n                    childPane.parentUid = pane.uid;\n\n                    if (childPane.type == CONTENT) {\n                        if (childPane.unpinnable === undefined$1 || childPane.unpinnable === true) {\n                            childPane.unpinnable = {\n                                unpinned: false\n                            };\n                        }\n                        childPane.uid = childPane.uid || kendo.guid();\n                    }\n\n                    if (childPane.panes && childPane.panes.length) {\n                        that._processPanes(childPane);\n                    }\n                });\n            },\n\n            _extendPane: function(pane) {\n                const that = this;\n\n                if (pane.panes) {\n                    for (var j = 0; j < pane.panes.length; j++) {\n                        pane.panes.forEach(subItem => {\n                            that._extendPane(subItem);\n                        });\n                    }\n                }\n\n                extend(pane, {\n                    visible: pane.visible === undefined$1 ? that.paneDefaults.visible : pane.visible,\n                    closeable: pane.closeable === undefined$1 ? that.paneDefaults.closeable : pane.closeable,\n                    collapsed: pane.collapsed === undefined$1 ? that.paneDefaults.collapsed : pane.collapsed,\n                    size: pane.size === undefined$1 ? that.paneDefaults.size : pane.size,\n                });\n            },\n\n            _togglePane: function(pane) {\n                const that = this;\n\n                pane.visible = !pane.visible;\n                that._refreshRootPane();\n            },\n\n            _removePane: function(pane) {\n                const that = this;\n                const parentPane = that._findPaneByUid(pane.parentUid);\n                const paneIndex = parentPane.panes.indexOf(pane);\n                const parentPaneElement = that.panesContainer.find(`[${UID_ATTR}=\"${pane.uid}\"]`).parent();\n\n                parentPane.panes.splice(paneIndex, 1);\n                that._refreshRootPane();\n            },\n\n            _refreshToolbar: function() {\n                const that = this;\n                const unpinnedPanes = that._unpinnedPanes();\n                const unpinnedPannesContainer = $(`<div class=\"${KHIDDEN}\"/>`).addClass(KUNPINNED_CONTAINER);\n\n                if (!that.unpinnedContainer) {\n                    that.unpinnedContainer = unpinnedPannesContainer;\n                    unpinnedPannesContainer.append(unpinnedResizeSplitbar);\n                    unpinnedPannesContainer.insertBefore(that.panesContainer);\n                }\n\n                if (!unpinnedPanes.length) {\n                    that._toolbar && that._toolbar.remove();\n                    that._toolbar = null;\n                    return;\n                }\n\n                if (!that._toolbar) {\n                    that._toolbar = that.element.prepend(TOOLBAR_TEMPLATE).find(`.${DOCK_MANAGER_TOOLBAR}`);\n                }\n\n                that._toolbar.empty();\n\n                for (let i = 0; i < unpinnedPanes.length; i++) {\n                    const pane = unpinnedPanes[i];\n\n                    const button = $(kendo.html.renderButton({ fillMode: \"flat\", size: \"small\" }))\n                                    .addClass(TOOLBAR_BUTTON)\n                                    .append(buttonTextTemplate(that._paneHeader(pane)));\n\n                    button.attr(UID_ATTR, pane.uid);\n                    that._toolbar.append(button);\n\n                    if (i < unpinnedPanes.length - 1) {\n                        that._toolbar.append(SEPARATOR);\n                    }\n                }\n            },\n\n            destroy: function() {\n                const that = this;\n\n                Widget.fn.destroy.call(that);\n\n                that.element.off(NS);\n                that.element.empty();\n\n                kendo.destroy(that.wrapper);\n            },\n\n            refresh: function() {\n                const that = this;\n                kendo.destroy(that.unpinnedContainer);\n                that.unpinnedContainer.empty();\n                that._refreshRootPane();\n            },\n\n            _refreshRootPane: function() {\n                const that = this;\n                const rootPaneElement = that.element.find(`[${UID_ATTR}=\"${that.options.rootPane.uid}\"]`);\n\n                that._refreshPane(rootPaneElement, that.options.rootPane);\n            },\n\n            _createSplitPane: function(parentElement, pane) {\n                const that = this;\n                const splitterElement = $(\"<div/>\").attr(UID_ATTR, pane.uid);\n                const splitterOptions = {\n                    orientation: pane.orientation || HORIZONTAL,\n                    panes: []\n                };\n\n                if (!pane.panes.some(x=>x.visible)) {\n                    return;\n                }\n\n                parentElement.append(splitterElement);\n\n                pane.panes.forEach((childPane) => {\n                    const paneOptions = {\n                        uid: childPane.uid\n                    };\n                    const paneElement = $(PANE).removeClass(KSTATIC_PANE);\n\n                    if (childPane.unpinnable && childPane.unpinnable.unpinned) {\n                        that._createUnpinnedPane(childPane);\n                        return;\n                    }\n\n                    if (childPane.size) {\n                        paneOptions.size = childPane.size;\n                    }\n\n                    if (childPane.visible != undefined$1) {\n                        paneOptions.visible = childPane.visible;\n                    }\n\n                    if (childPane.visible) {\n                        splitterElement.append(paneElement);\n                        that._createPane(paneElement, childPane);\n                        splitterOptions.panes.push(paneOptions);\n                    }\n                });\n\n               pane.splitter = new DockSplitter(splitterElement, splitterOptions); // eslint-disable-line no-new\n               pane.splitter.bind(RESIZE, that._updatePaneSize.bind(that));\n            },\n\n            _updatePaneSize: function(e) {\n                const that = this;\n                const leftPane = that._findPaneByUid(e.leftPane.uid),\n                rightPane = that._findPaneByUid(e.rightPane.uid);\n\n                leftPane.size = e.leftPane.size;\n                rightPane.size = e.rightPane.size;\n                that.trigger(RESIZE, { ev: e, leftPane: leftPane, rightPane: rightPane });\n            },\n\n            _createTabPane: function(parentElement, pane) {\n                const that = this;\n                const tabStripElement = $(\"<div class='k-header'/>\");\n                const tabContainer = $(\"<ul/>\");\n                const tabStripOptions = {\n                    animation: false,\n                    activate: (e) => {\n                        e.sender.tabGroup.find(`.${KBUTTON}`).removeClass(KBUTTON_BASE).addClass(KBUTTON_PRIMARY);\n                        e.sender.tabGroup.find(e.item).find(`.${KBUTTON}`).removeClass(KBUTTON_PRIMARY).addClass(KBUTTON_BASE);\n                    }\n                };\n                const selectedPane = (pane.selected === undefined$1 || pane.panes.indexOf(pane.panes[pane.selected]) == -1 || pane.panes[pane.selected].unpinnable.unpinned) ? 0 : pane.selected;\n\n                if (!pane.panes.some(x=>x.visible)) {\n                    return;\n                }\n\n                tabStripElement.append(tabContainer);\n                parentElement.append(tabStripElement);\n                parentElement.attr(UID_ATTR, pane.uid);\n                parentElement.addClass(KPANE_TABBED);\n\n                pane.panes.forEach((childPane) => {\n                    const tab = $(tabTemplate(that._paneHeader(childPane))).attr(UID_ATTR, childPane.uid);\n                    const contentElement = $(\"<div/>\");\n\n                    if (childPane.unpinnable && childPane.unpinnable.unpinned) {\n                        that._createUnpinnedPane(childPane);\n                        return;\n                    }\n\n                    if (childPane.visible) {\n                        that._addActions(tab, childPane);\n                        tabContainer.append(tab);\n                        tabStripElement.append(contentElement);\n                        that._createPane(contentElement, childPane);\n                    }\n                });\n\n                const initialySelected = $(tabContainer.children()[selectedPane]).addClass(KACTIVE);\n                initialySelected.find(`.${KBUTTON}`).removeClass(KBUTTON_PRIMARY).addClass(KBUTTON_BASE);\n                tabStripElement.kendoTabStrip(tabStripOptions);\n            },\n\n            _createContentPane: function(parentElement, pane) {\n                const that = this;\n                const content = typeof pane.content === \"function\" ? kendo.template(pane.content)({}) : pane.content;\n                const element = $(contentPaneTemplate(extend({}, pane, { title: that._paneHeader(pane), content: content })));\n                const parentPane = that._findPaneByUid(pane.parentUid);\n                const isUnnpinned = pane.unpinnable && pane.unpinnable.unpinned;\n\n\n                if (parentPane && parentPane.type === TAB && !isUnnpinned) {\n                    parentElement.append(content);\n                    return;\n                }\n\n                parentElement.addClass(isUnnpinned ? KKUNPINNED_PANE : KKPINNED_PANE)\n                             .removeClass(KSTATIC_PANE)\n                             .attr(UID_ATTR, pane.uid);\n                that._addActions(element.find(`.${KPANE_ACTIONS}`), pane);\n                parentElement.append(element);\n            },\n\n            _createUnpinnedPane: function(pane) {\n                const that = this;\n                const paneElement = $(PANE).removeClass(KSTATIC_PANE);\n\n                if (that.unpinnedContainer.find(paneSelector(pane.uid)).length) {\n                    return;\n                }\n\n                that.unpinnedContainer.prepend(paneElement);\n                that._createContentPane(paneElement, pane);\n            },\n\n            _addActions: function(actionsContainer, pane) {\n                const that = this;\n                let themeColor = 'base';\n\n                if (actionsContainer.is('li')) {\n                    themeColor = 'primary';\n                }\n\n                that.actions.forEach((action) => {\n                    if (action.shouldAdd(pane)) {\n                        actionsContainer.append($(kendo.html.renderButton({ fillMode: \"flat\", icon: action.icon, themeColor })).attr(ACTION_ATTR, action.name));\n                    }\n                });\n\n            },\n\n            _createPane: function(parentElement, pane) {\n                const that = this;\n\n                if (pane.id) {\n                    parentElement.attr(\"id\", pane.id);\n                }\n\n                return that[\"_create\" + capitalizeFirstLetter(pane.type) + \"Pane\"](parentElement, pane);\n            },\n\n            _unpinnedPanes: function(panes) {\n                const that = this;\n                const options = that.options;\n                let result = [];\n\n                if (!panes) {\n                    panes = options.rootPane.panes;\n                }\n\n                panes.forEach((pane) => {\n                    if (pane.unpinnable && pane.unpinnable.unpinned) {\n                        result.push(pane);\n                    }\n\n                    if (pane.panes && pane.panes.length) {\n                        result = result.concat(that._unpinnedPanes(pane.panes));\n                    }\n                });\n\n                return result;\n            },\n\n            _paneHeader: function(pane) {\n                const that = this;\n                const parentPane = that._findPaneByUid(pane.parentUid);\n                const isTabbed = parentPane && parentPane.type === \"tab\";\n                let header = pane.header;\n\n                if (isTabbed && pane.tabHeader) {\n                    header = pane.tabHeader;\n                }\n\n                if (!header) {\n                    return pane.title || \"\";\n                }\n\n                return kendo.template(header)(pane);\n            },\n\n            _findPaneByUid: function(uid, parent) {\n                const that = this;\n                let found;\n\n                parent = parent || that.options.rootPane;\n\n                if (parent.uid === uid) {\n                    return parent;\n                }\n\n                parent.panes.forEach((pane) => {\n                    if (pane.uid === uid) {\n                        found = pane;\n                        return;\n                    }\n\n                    if (pane.panes && pane.panes.length) {\n                        const result = that._findPaneByUid(uid, pane);\n\n                        if (result) {\n                            found = result;\n                            return;\n                        }\n                    }\n                });\n                return found;\n            },\n\n            _getPaneById: function(pane, prop, value) {\n                const that = this;\n                let found;\n\n                if (pane[prop] == value) {\n                    return pane;\n                }\n\n                if (pane.panes) {\n                    pane.panes.forEach((childPane) => {\n                        let result = that._getPaneById(childPane, prop, value);\n                        if (result) {\n                            found = result;\n                        }\n                    });\n                }\n                return found;\n            },\n\n            _initNavigator: function(params) {\n                const that = this;\n\n                that.navigatorDraggable = new kendo.ui.Draggable(that.element, {\n                    autoScroll: true,\n                    filter: \".k-pane-header, .k-pane-tabbed .k-tabstrip-item\",\n                    hint: function(element) {\n                        const isTabbed = element.is(\"li\");\n                        const paneElement = element.closest(`.${KPANE}`);\n                        const pane = that._findPaneByUid((isTabbed ? element : paneElement).attr(UID_ATTR));\n                        const actionsHtml = isTabbed ? that._getActionButtons(element) : paneElement.find(`.${KPANE_ACTIONS}`).html();\n\n                        return hintTemplate({\n                            width: paneElement.width(),\n                            height: paneElement.height(),\n                            content: pane.content,\n                            title: that._paneHeader(pane),\n                            actions: actionsHtml,\n                        });\n                    },\n                    updateHint: function(hint, event) {\n                        const coordinates = {\n                            left: event.x.location + 1,\n                            top: event.y.location + 1,\n                        };\n\n                        const additionStyles = {\n                            zIndex: 100010,\n                        };\n\n                        hint.css($.extend({}, coordinates, additionStyles));\n\n                    },\n                    dragstart: that._dragStart.bind(that),\n                    dragend: that._dragEnd.bind(that),\n                    drag: that._drag.bind(that)\n                });\n            },\n\n            _dragStart: function(e) {\n                const that = this;\n                const target = $(e.currentTarget);\n                const pane = target.closest(`.${KPANE}`);\n\n                that.draggedPane = {\n                    width: pane.width(),\n                    height: pane.height(),\n                    pane,\n                    target\n                };\n\n                that._displayGlobalIndicators();\n\n                that.trigger(DRAGSTART, { pane: that.draggedPane.pane, draggableEvent: e });\n            },\n\n            _dragEnd: function(e) {\n                const that = this;\n                const hoveredIndicator = that.element.find(`.${KDOCK_INDICATOR}:hover`);\n                const eventData = { pane: that.draggedPane.pane, draggableEvent: e };\n\n                if (hoveredIndicator.length) {\n                    that.navigatorDraggable.hint.hide();\n                    that._updateLayout(hoveredIndicator);\n                }\n\n                that.element.find(`.${KDOCK_INDICATOR}`).remove();\n                that.element.find(`.${KDOCK_PREVIEW}`).remove();\n\n                if (!hoveredIndicator.length) {\n                    that._showHiddenPanes();\n                }\n                that.trigger(DRAGEND, eventData);\n                that.hoveredPane = null;\n                that.draggedPane = null;\n            },\n\n            _drag: function(e) {\n                const that = this;\n                const currentPane = $(e.elementUnderCursor).closest(`.${KPANE}[${UID_ATTR}]`);\n                const pane = that._findPaneByUid(currentPane.attr(UID_ATTR));\n                const navigator = $(NAVIGATOR_TEMPLATE);\n                const currentPaneUid = currentPane.attr(UID_ATTR);\n                const prevPaneUid = that.hoveredPane && that.hoveredPane.attr(UID_ATTR);\n                const eventData = { pane: that.draggedPane.pane, draggableEvent: e };\n                const dragTargetUid = e.currentTarget.closest(`.${KPANE}`).attr(UID_ATTR);\n\n                if (that.trigger(DRAG, eventData)) {\n                    e.preventDefault();\n                    return;\n                }\n\n                if (currentPaneUid === prevPaneUid) {\n                    return;\n                }\n\n                that.hoveredPane = currentPane;\n                that.element.find(`.${KDOCK_NAVIGATOR}`).remove();\n                navigator.css({\n                    position: \"absolute\",\n                    top: \"50%\",\n                    left: \"50%\",\n                    transform: \"translate(-50%,-50%)\",\n                    \"z-index\": 100008\n                });\n\n                if (pane && pane.dockable && !pane.dockable.innerDock) {\n                    navigator.css(\"display\", \"none\");\n                }\n                if (currentPaneUid !== dragTargetUid) {\n                    currentPane.append(navigator);\n                }\n            },\n\n            _showHiddenPanes: function() {\n                const that = this;\n                const isTabbed = that.draggedPane.pane.is(`.${KPANE_TABBED}`);\n\n                if (isTabbed) {\n                    return that._showTab();\n                }\n\n                that._showPane(that.draggedPane.pane);\n            },\n\n            _showTab: function(tab) {\n                if (tab === undefined$1) {\n                    return;\n                }\n\n                const that = this;\n                const tabstrip = tab.closest(`.${KTABSTRIP}`).data(\"kendoTabStrip\");\n\n                tab.show();\n                tabstrip.activateTab(tab);\n            },\n\n            _showPane: function(paneElement) {\n                const that = this;\n                const splitbar = paneElement.siblings(`.${KSPLITBAR}:hidden`);\n                paneElement.show();\n                splitbar.show();\n            },\n\n            _hideDraggedPane: function(draggedElement) {\n                const that = this;\n                const isTabbed = draggedElement.is(\"li\");\n\n                if (isTabbed) {\n                    return that._hideTab(draggedElement);\n                }\n\n                that._hidePane(draggedElement);\n            },\n\n            _hidePane: function(draggedElement) {\n                const that = this;\n                const paneElement = draggedElement.closest(`.${KPANE}`);\n                const prevElement = paneElement.prev();\n                const nextElement = paneElement.next();\n\n                paneElement.hide();\n\n                if (prevElement.is(`.${KSPLITBAR}`)) {\n                    return prevElement.hide();\n                }\n\n                nextElement.hide();\n            },\n\n            _hideTab: function(tab) {\n                const that = this;\n                const isActive = tab.is(`.${KACTIVE}`);\n                const tabstrip = tab.closest(`.${KTABSTRIP}`).data(\"kendoTabStrip\");\n\n                tab.hide();\n\n                if (isActive) {\n                    tabstrip.activateTab(\"li:visible:first\");\n                }\n            },\n\n            _getActionButtons: function(paneElement) {\n                const buttons = paneElement.find(\"button\");\n                const container = $(\"<div/>\");\n\n                buttons.each((_, button) => container.append($(button).clone()));\n\n                return container.html();\n            },\n\n            _displayGlobalIndicators: function() {\n                const that = this;\n\n                that.indicators.forEach((indicator) => {\n                    const element = $(INDICATOR_TEMPLATE);\n\n                    if (indicator.name === \"middle\") {\n                        return;\n                    }\n\n                    that.element.append(element);\n                    element.css({\n                        position: \"absolute\",\n                        \"z-index\": \"100002\",\n                        top: indicator.top,\n                        left: indicator.left,\n                        transform: `${indicator.transform} rotate(${indicator.rotate})`\n                    });\n                    element.attr(INDICATOR_ATTR, indicator.name);\n                });\n            },\n\n            _displayDockPreview: function(e) {\n                const that = this;\n                const indicator = $(e.currentTarget);\n                const isGlobalIndicator = !indicator.parent().is(`.${KDOCK_NAVIGATOR}`);\n                const indicatorName = indicator.attr(INDICATOR_ATTR);\n                const indicatorUid = indicator.attr(UID_ATTR);\n                const indicatorData = that.indicators.filter(i => i.name === indicatorName)[0];\n                const previewElement = $(`<div class=\"${KDOCK_PREVIEW}\"/>`);\n                const container = isGlobalIndicator ? that.panesContainer : that.hoveredPane;\n                const toolbarWidth = that._toolbar ? that._toolbar.outerWidth() : 0;\n                const containerWidth = container.outerWidth();\n                const containerHeight = container.outerHeight();\n                const existingPreview = indicatorUid && container.find(`.${KDOCK_PREVIEW}[${UID_ATTR}=\"${indicatorUid}\"]`);\n                const uid = kendo.guid();\n                let width = that.draggedPane.width;\n                let height = that.draggedPane.height;\n\n                if (existingPreview && existingPreview.length) {\n                    return existingPreview.show();\n                }\n\n                if (indicatorName === MIDDLE) {\n                    width = containerWidth;\n                    height = containerHeight;\n                }\n\n                if (indicatorName === TOP || indicatorName === BOTTOM) {\n                    if (height > containerHeight / 2) {\n                        height = containerHeight / 2;\n                    }\n\n                    width = containerWidth;\n                }\n\n                if (indicatorName === LEFT || indicatorName === RIGHT) {\n                    if (width > containerWidth / 2) {\n                        width = containerWidth / 2;\n                    }\n\n                    height = containerHeight;\n                }\n\n                const css = {\n                    position: \"absolute\",\n                    \"z-index\": 100000,\n                    top: indicatorData.previewTop(containerHeight, height),\n                    left: indicatorData.previewLeft(containerWidth, width) + (isGlobalIndicator ? toolbarWidth : 0),\n                    width: width,\n                    height\n                };\n\n                previewElement.css(css);\n                previewElement.attr(INDICATOR_ATTR, indicatorData.name)\n                              .attr(UID_ATTR, uid);\n                indicator.attr(UID_ATTR, uid);\n                container.append(previewElement);\n                that.draggedPane.preview = {\n                    width,\n                    height\n                };\n                that.draggedPane.container = {\n                    width: containerWidth,\n                    height: containerHeight\n                };\n            },\n\n            _hideDockPreview: function() {\n                const that = this;\n\n                that.element.find(`.${KDOCK_PREVIEW}`).hide();\n            },\n\n            _updateLayout: function(indicator) {\n                const that = this;\n                const isTabbed = that.draggedPane.target.is(\"li\");\n                const isGlobalIndicator = !indicator.parent().is(`.${KDOCK_NAVIGATOR}`);\n                const paneElement = isTabbed ? that.draggedPane.target : that.draggedPane.pane;\n                const hoveredPane = that._findPaneByUid(that.hoveredPane.attr(UID_ATTR));\n                const draggedPane = that._findPaneByUid(paneElement.attr(UID_ATTR));\n                const location = indicator.attr(INDICATOR_ATTR);\n                const draggedPaneParent = that._findPaneByUid(draggedPane.parentUid);\n                const draggedPaneIndex = draggedPaneParent.panes.indexOf(draggedPane);\n                const rootPaneElement = that.element.find(`[${UID_ATTR}=\"${that.options.rootPane.uid}\"]`);\n\n                draggedPaneParent.panes.splice(draggedPaneIndex, 1);\n                location == MIDDLE ? that._tabDock(hoveredPane, draggedPane) : that._splitDock(hoveredPane, draggedPane, location, isGlobalIndicator);\n                that._processPanes(that.options.rootPane);\n                that._adjustSiblingSizes(draggedPane, location, isGlobalIndicator);\n                that._refreshPane(rootPaneElement, that.options.rootPane);\n                location == MIDDLE ?\n                    that.trigger(INNER_DOCK, { pane: draggedPane, paneElement: paneElement }) :\n                    that.trigger(DOCK, { pane: draggedPane, paneElement: paneElement });\n            },\n\n            _splitDock: function(targetPane, pane, location, isGlobalDock) {\n                const that = this;\n                const targetPaneParent = isGlobalDock ? that.options.rootPane : that._findPaneByUid(targetPane.parentUid);\n                const targetPaneIndex = targetPaneParent.panes.indexOf(targetPane);\n                const action = location === TOP || location === LEFT ? UNSHIFT : PUSH;\n                const paneIndex = targetPaneIndex + (action === UNSHIFT ? 0 : 1);\n                const orientation = location === TOP || location === BOTTOM ? VERTICAL : HORIZONTAL;\n                const dimension = location === TOP || location === BOTTOM ? HEIGHT : WIDTH;\n                const newParentPane = {\n                    type: SPLIT,\n                    orientation,\n                    panes: [],\n                };\n                const previewSize = that.draggedPane.preview[dimension];\n                const size = `${previewSize}px`;\n\n                pane.size = size;\n\n                if (isGlobalDock) {\n                    newParentPane.panes.push(targetPaneParent);\n                    (location === TOP || location === LEFT) ? newParentPane.panes.unshift(pane) : newParentPane.panes.push(pane);\n                    that.options.rootPane = newParentPane;\n                    return;\n                }\n\n                if (((location === TOP || location === BOTTOM) && targetPaneParent.orientation === VERTICAL) ||\n                    ((location === LEFT || location === RIGHT) && targetPaneParent.orientation === HORIZONTAL)) {\n                    return targetPaneParent.panes.splice(paneIndex, 0, pane);\n                }\n\n                if (targetPane) {\n                    newParentPane.size = targetPane.size;\n                    targetPane.size = null;\n                }\n\n                targetPaneParent.panes.splice(targetPaneIndex, 1);\n                newParentPane.panes.push(targetPane);\n                newParentPane.panes[action](pane);\n                targetPaneParent.panes.splice(targetPaneIndex, 0, newParentPane);\n            },\n\n            _tabDock: function name(targetPane, pane) {\n                const that = this;\n                const targetPaneParent = that._findPaneByUid(targetPane.parentUid);\n                const targetPaneIndex = targetPaneParent.panes.indexOf(targetPane);\n                const newParentPane = {\n                    type: TAB,\n                    panes: [\n                        targetPane,\n                        pane\n                    ]\n                };\n\n                if (targetPane.type === TAB) {\n                    targetPane.panes.push(pane);\n                    return;\n                }\n\n                targetPaneParent.panes.splice(targetPaneIndex, 1);\n                targetPaneParent.panes.splice(targetPaneIndex, 0, newParentPane);\n\n            },\n\n            _adjustSiblingSizes: function(pane, location, isGlobalDock) {\n                const that = this;\n                const siblings = that._getSiblings(pane);\n                const dimension = location === TOP || location === BOTTOM ? HEIGHT : WIDTH;\n                const parentSize = that.draggedPane.container[dimension];\n                const draggedPaneSize = that.draggedPane[dimension];\n                const newParentSize = parentSize - draggedPaneSize;\n                const noSizePanes = [];\n                let freeSpace = newParentSize;\n\n                if (location === MIDDLE) {\n                    return;\n                }\n\n                if (siblings.length === 2) {\n                    siblings[0].size = null;\n                    return;\n                }\n\n                siblings.forEach((childPane) => {\n                    if (childPane.uid === pane.uid) {\n                        return;\n                    }\n\n                    if (!childPane.size) {\n                        noSizePanes.push(childPane);\n                        return;\n                    }\n\n                    childPane.size = that._calculateNewSize(parentSize, newParentSize, childPane.size);\n                    freeSpace -= childPane.size;\n                });\n\n                noSizePanes.forEach((noSizePane) => {\n                    const newSize = freeSpace / noSizePanes.length;\n\n                    noSizePane.size = newSize;\n                });\n\n            },\n\n            _calculateNewSize: function(parentSize, newParentSize, paneSize) {\n                const proportion = newParentSize / parentSize;\n                let unit = \"px\";\n                let noUnitSize;\n\n                if (isPercentageSize(paneSize)) {\n                    unit = \"%\";\n                }\n                if (typeof paneSize === \"string\") {\n                    noUnitSize = +paneSize.replace(unit, \"\");\n                }\n\n                return `${noUnitSize * proportion}${unit}`;\n            },\n\n            _getSiblings: function(pane) {\n                const that = this;\n                const parent = that._findPaneByUid(pane.parentUid);\n\n                return parent.panes.filter(p => p.visible !== false &&\n                                                p.uid !== pane.uid &&\n                                                (p.unpinnable && p.unpinnable.unpinned !== true));\n            }\n        });\n\n        ui.plugin(DockManager);\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    return kendo$1;\n\n}));\n"]}