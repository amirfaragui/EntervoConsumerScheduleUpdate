@{
  ViewData["Title"] = "Dashboard";
  ViewData["ActivePage"] = "Dashboard";
}

<h3>Dashboard</h3>

<style>
  .console {
    font-family: Courier;
    color: #CCCCCC;
    background: #000000;
    border: 3px double #CCCCCC;
    padding: 10px;
    overflow: auto;
    height: calc(100vh - 220px);
  }

  span.record {    
    display: block;
    line-height: 20px;
    white-space: nowrap;
  }

  .red {
    background-color: crimson;
  }

  .green {
    background-color: darkgreen;
  }

</style>

@(
Html.Kendo().ToolBar()
  .Name("ToolBar")
  .Items(items =>
  {
    items.Add().Type(CommandType.SplitButton).Text("Consumers").Icon("data").MenuButtons(mb =>
    {
      mb.Add().Text("Download").Icon("download").Id("downloadConsumers");
      mb.Add().Text("Update").Icon("upload").Id("uploadConsumers");
    }).Click("onConsumersClicked").Primary();
    items.Add().Type(CommandType.SplitButton).Text("Payroll File").Icon("file-csv").MenuButtons(mb => {
      mb.Add().Text("Download from FTP").Icon("download").Id("downloadFromFtp");
      mb.Add().Text("Manual upload").Icon("upload").Id("manualUpload");
    }).Click("onPayrollFileClicked");
    items.Add().Type(CommandType.SplitButton).Text("Gernerate File").Icon("data-csv").MenuButtons(mb =>
    {
      mb.Add().Text("Payroll deduction file").Icon("file-csv").Id("generate04File");
      mb.Add().Text("Payroll export file").Icon("file-csv").Id("generate01File");
    }).Click("onExportClicked");
    items.Add().Type(CommandType.Spacer);
    items.Add().Type(CommandType.Button).Text("Clear").Icon("trash").Click("onEmpty").HtmlAttributes(new { @class = "red"});
  })
)

<div id="console" class="console">
</div>

@section Scripts {
  <script src="~/js/signalr/dist/browser/signalr.min.js"></script>

  <script type="text/javascript">

    var logFeed = new signalR.HubConnectionBuilder()
      .withUrl('@Url.Action("","logbookHub")')
      .withAutomaticReconnect()
      .configureLogging(signalR.LogLevel.Trace)
      .build();

    logFeed.on("connectionEstablished", function (connectionId) {
      subscribeLogbookEvents(connectionId);
    });


    function subscribeLogbookEvents(connectionId) {
      logFeed.stream("Stream", connectionId)
        .subscribe({
          next: onMessageReceived,
          complete: () => {
          },
          error: (err) => {
            console.error(err);
          }
        });
    }

    function onMessageReceived(e) {
      $('#console').append(`<span class="record">${e}</span>`);

      var elem = document.getElementById('console');
      elem.scrollTop = elem.scrollHeight;
    }

    function onEmpty() {
      $('#console').empty();
    }


    function onConsumersClicked(e) {
      onEmpty();
      if (e.id == "uploadConsumers") {
        $.post('@Url.Action("updateConsumers", "dashboard")');
      }
      else if (e.id == "downloadConsumers") {
        $.post('@Url.Action("downloadConsumers", "dashboard")');
      }
    }

    function onPayrollFileClicked(e) {
      onEmpty();
      if (e.id == "downloadFromFtp") {
        $.post('@Url.Action("downloadPayrollFile", "dashboard")');
      }
      else if (e.id == "manualUpload") {
        window.open('@Url.Action("index", "upload")', '_black');
      }
    }

    function onExportClicked(e) {
      onEmpty();
      if (e.id == "generate01File") {
        $.post('@Url.Action("generate01ExportFile", "dashboard")');
      }
      else if (e.id == "generate04File") {
        $.post('@Url.Action("generate04ExportFile", "dashboard")');
      }
    }

    $(function () {
      logFeed.start()
        .catch(function (err) {
          return console.error(err.toString());
        });
    });
  </script>
}